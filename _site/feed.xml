<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>漫漫前端路</title>
    <description></description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 06 Apr 2015 10:49:14 +0800</pubDate>
    <lastBuildDate>Mon, 06 Apr 2015 10:49:14 +0800</lastBuildDate>
    <generator>Jekyll v2.5.2</generator>
    
      <item>
        <title>为什么选择前端</title>
        <description>&lt;p&gt;这些天面试反复地被问到这样的问题。而每次因为紧张和时间仓促，感觉也没有很好地叙述这个问题。&lt;/p&gt;

&lt;p&gt;如果看过我的简历，应该知道2013-10月到2014-8月在日本实习。该怎么说这段经历呢？毫不犹豫地说，这段经历对我技术方面毫无益处。因为这和我现在要
从事的前端方向是南辕北辙的。我所收获的，是除了编程以外的技能。除此，还有我自己都不清楚底究竟是在实习期间收获的，还是在回国后的那段经历所收获
的体会。&lt;/p&gt;

&lt;p&gt;这就得说说我实习前的状态了。或者更早些，为什么我选择计算机行业。&lt;/p&gt;

&lt;p&gt;我数学很糟糕。但一点都不妨碍我高考两次都选择了计算机相关的专业，哪怕是我爸一而再再而三地劝我应该选择比如英语，化学之类我擅长的科目。我家从01
年开始有了电脑，和我那些同学比起来，我真是超前了不少。也正是这种优势让我选择了计算机吧。但小县城这种环境，根本让我接触不了编程语言，我并没想
到它远远比我想象得复杂。我只是憧憬着，中二着，幻想着。我对它有兴趣，但我却没有深入了解过它。&lt;/p&gt;

&lt;p&gt;然后大学四年消磨了我对它所有的兴趣。数据结构与算法在我眼中仅仅是考研必考科目而已。而且还考得不咋地。但不意味着我没有努力过。至少我觉得我努力
了。我也觉得我理解了。但是就是不会把它转换成代码。仿佛代码和算法思想之间缺少了纽带。&lt;/p&gt;

&lt;p&gt;然后就到了研究生时期。我曾决心这段时期（研一）一定要精通一门语言，一定要熟悉算法和数据结构。可软院的课程实在太多了。不得不说这段时期我有些心
有余而力不足。这也许就是本科基础不牢的后遗症吧。然后我就迷茫得心乱了，甚至连小说都看不进去了，更不用提技术书。&lt;/p&gt;

&lt;p&gt;实习完后，我体验到前所未有的挫折--找工作/实习。我不知道自己该找一份什么样的工作。我不想从事在日本期间的图像处理方向，也不想转而去搞产品。开
发要求比较高，那就去测试吧。不行，测试听说很无聊，还是折衷搞测试开发吧。9月10月我就这么找着，也许是立场不坚定，对这个方向也不是很喜欢，结果
扑了个空。10月底的时候，同去日本实习过的朱桑说，搞前端吧，前端需求量大，又容易。&lt;/p&gt;

&lt;p&gt;然后，我就入了这个坑。整个十一月看的都是面试题。那个月笔了3家公司，面了2家公司，都是一面挂。这是很明显的，基础不牢。那个月真是痛并快乐着。痛
的是一个人学习的孤独，快乐的是解决一个个问题的喜悦。那时候便开始觉得，也许，前端真是一个不错的选择呢。&lt;/p&gt;

&lt;p&gt;十二月意识到基础不牢后，开始看《CSS权威指南》。第一个难关就是字体。好久不曾为一个问题急躁，翻看各种资料，获取其中的信息，喜悦。还挺享受这样
的一个过程。所以就这么一直一直坚持到现在。仿佛回到那个时候，那个对知识极度渴望的时候。这也是我继续并打算长久从事前端的理由吧。&lt;/p&gt;

&lt;p&gt;现在，最大的问题。也许这几个月学得太泛，太杂。有些自认为掌握的知识点又模糊不清。还需不停地回顾总结。还有一个，算法。现在对算法有种浓浓的愧疚
感。这将会是以后的学习重点。&lt;/p&gt;

&lt;p&gt;最后，简单地概括下，为什么选择前端。因为我开心啊~~^_^&lt;/p&gt;
</description>
        <pubDate>Fri, 03 Apr 2015 00:00:00 +0800</pubDate>
        <link>/life/why-fe/</link>
        <guid isPermaLink="true">/life/why-fe/</guid>
        
        <category>生活</category>
        
        <category>前端</category>
        
        
        <category>life</category>
        
      </item>
    
      <item>
        <title>正则表达式</title>
        <description>&lt;p&gt;基本的元字符之类的百度谷歌各种正则书都有介绍，就不再重复啦。另外&lt;a href=&quot;http://www.regexr.com/&quot;&gt;RegExr&lt;/a&gt;的cheatsheet也有简要介绍。&lt;/p&gt;

&lt;p&gt;要介绍的是对两个正则的理解。&lt;/p&gt;

&lt;h5&gt;1.密码（要求至少8个字符，至少一个数字，至少有一个小写字母和一个大写字母，至少包含一个比如&lt;code&gt;@#%$^&lt;/code&gt;的字符，不能包含空白）&lt;/h5&gt;

&lt;p&gt;答案是&lt;code&gt;/^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#%$^])(?=\S+$).{8,}$/gm&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;(?=abc)&lt;/code&gt;，正向先行断言。自我吐槽一句，“断言”这个词汇硬是理解了半天。不就是“判断的句子”的意思么？所以正向断言就是判断字符串是否满足条件，
但又不消耗字符串的字符。有点像&lt;code&gt;if(abc){}&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;因此&lt;code&gt;(?=.*[0-9])&lt;/code&gt;就是满足“除换行符以外的其他字符任意个+任意一个数字”这样一个条件。后面4个先行断言也是如此。因此整个正则的意思就是满足这5个
条件的8个以上的任意字符。&lt;/p&gt;

&lt;h5&gt;2.千分符&lt;/h5&gt;

&lt;p&gt;在一篇介绍正则的文章中看到的这个例子。有意思的是，当初我看不懂那道正则，然后Google了一下相关问题，结果找到了另外一种解法。等我理解完这种解法
后，我才发现Google到的那个正则要比那篇文章中的正则要难理解得多。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;putComma&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/\B(?=(?:\d{3})+(?!\d))/g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;(?!abc)&lt;/code&gt;，负向先行断言。相当于&lt;code&gt;if(!abc){}&lt;/code&gt;。所以&lt;code&gt;(?=(?:\d{3})+(?!\d))&lt;/code&gt;的意思就是数字的数目要成3的倍数，后面不可有额外的数字。&lt;/p&gt;

&lt;p&gt;用一张图来解释就是这样的：&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://7sbqpj.com1.z0.glb.clouddn.com/regexp.png&quot; alt=&quot;regexp&quot;&gt;
    &lt;figcaption&gt;上述正则的图解&lt;/figcaption&gt;
&lt;/figure&gt;
</description>
        <pubDate>Sun, 22 Mar 2015 00:00:00 +0800</pubDate>
        <link>/articles/regexp-1/</link>
        <guid isPermaLink="true">/articles/regexp-1/</guid>
        
        <category>正则</category>
        
        <category>JavaScript</category>
        
        
        <category>articles</category>
        
      </item>
    
      <item>
        <title>一个尚未解决的问题</title>
        <description>&lt;div class=&quot;text-info&quot;&gt;正确的标题不应该是这样的，但是由于此问题尚未解决，不知道该起什么名字好。:)&lt;/div&gt;

&lt;p&gt;起因是某日搜东西的跳到搜狗问问页面，字体如下图般混乱得无力吐槽。
&lt;figure&gt;
    &lt;img src=&quot;http://7sbqpj.com1.z0.glb.clouddn.com/sogou.png&quot; alt=&quot;搜狗问问首页侧栏&quot;&gt;
    &lt;figcaption&gt;Chrome下搜狗问问首页侧栏&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;再查看渲染字体，把我一惊，居然有日文字体。可是明明样式里字体设置&lt;code&gt;font-family: tahoma,arial,helvetica,sans-serif,simsun;&lt;/code&gt;除了把宋体错
误地写在最后以外，并没有什么地方设置了日文字体啊。而且，除了&lt;code&gt;html&lt;/code&gt;标签未设置lang属性外，也没有什么问题啊。
&lt;figure&gt;
    &lt;img src=&quot;http://7sbqpj.com1.z0.glb.clouddn.com/rendered-fonts.png &quot; alt=&quot;Rendered fonts&quot;&gt;
    &lt;figcaption&gt;Chrome下该页面的渲染字体&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;后来发现：原来是Chrome的设置问题啊！因为Safari和FireFox没有这个问题啊！(T_T)。刚好那时候学了一点HTTP方面的知识，发现：原来Chrome
下该网页的HTTP response header的content-language为ja。而FireFox为en-us,Safari为zh-cn。&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://7sbqpj.com1.z0.glb.clouddn.com/res-header.png&quot; alt=&quot;Content-language information&quot;&gt;
    &lt;figcaption&gt;Chrome下该网页的响应头部信息&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;且accept-language里ja也是首位的。
原来在Chrome语言设置里，日文被我稀里糊涂地排在了首位！所以，Chrome下会出现日文字体不足为奇啊。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Content-Language is from the server, and lets the client know what language(s) are present on the requested page.
Accept-Language is from the client, and lets the server know the user&amp;#39;s preferred language(s).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;可是，为什么相同的设置，大多数网页都是正常的，且响应头里没有content-language信息呢？（后端知识不够啊.T_T）&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 11 Mar 2015 00:00:00 +0800</pubDate>
        <link>/articles/puzzle-unsolved/</link>
        <guid isPermaLink="true">/articles/puzzle-unsolved/</guid>
        
        <category>HTTP</category>
        
        <category>字体</category>
        
        <category>浏览器</category>
        
        
        <category>articles</category>
        
      </item>
    
      <item>
        <title>jQuery Dom</title>
        <description>&lt;h5&gt;1. append(), appendTo()与after(), insertAfter()&lt;/h5&gt;

&lt;p&gt;存在dom里的被插元素.append(新建的插入元素), 新建的插入元素.appendTo(存在dom里的被插元素).&lt;/p&gt;

&lt;p&gt;插入元素作为被插元素的最后一个子孩子。&lt;/p&gt;

&lt;p&gt;after()/insertAfter()相当于append()/appendTo()的关系，不同的是，插入元素是作为被插元素的后相邻节点插入的。&lt;/p&gt;

&lt;h5&gt;2. wrap(), wrapAll(), wrapInner()&lt;/h5&gt;

&lt;p&gt;已有节点：&lt;code&gt;&amp;lt;strong&amp;gt;&amp;lt;/strong&amp;gt;&amp;lt;strong&amp;gt;&amp;lt;/strong&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;代码：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;code&gt;$(&amp;quot;strong&amp;quot;).wrap(&amp;quot;&amp;lt;b&amp;gt;&amp;lt;/b&amp;gt;&amp;quot;);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Result: &lt;code&gt;&amp;lt;b&amp;gt;&amp;lt;strong&amp;gt;&amp;lt;/strong&amp;gt;&amp;lt;/b&amp;gt;&amp;lt;b&amp;gt;&amp;lt;strong&amp;gt;&amp;lt;/strong&amp;gt;&amp;lt;/b&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$(&amp;quot;strong&amp;quot;).wrapAll(&amp;quot;&amp;lt;b&amp;gt;&amp;lt;/b&amp;gt;&amp;quot;);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Result: &lt;code&gt;&amp;lt;b&amp;gt;&amp;lt;strong&amp;gt;&amp;lt;/strong&amp;gt;&amp;lt;strong&amp;gt;&amp;lt;/strong&amp;gt;&amp;lt;/b&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$(&amp;quot;strong&amp;quot;).wrapInner(&amp;quot;&amp;lt;b&amp;gt;&amp;lt;/b&amp;gt;&amp;quot;);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Result: &lt;code&gt;&amp;lt;strong&amp;gt;&amp;lt;b&amp;gt;&amp;lt;/b&amp;gt;&amp;lt;/strong&amp;gt;&amp;lt;strong&amp;gt;&amp;lt;b&amp;gt;&amp;lt;/b&amp;gt;&amp;lt;/strong&amp;gt;&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 22 Jan 2015 00:00:00 +0800</pubDate>
        <link>/articles/jquery-study-series-1/</link>
        <guid isPermaLink="true">/articles/jquery-study-series-1/</guid>
        
        <category>jQuery</category>
        
        
        <category>articles</category>
        
      </item>
    
      <item>
        <title>博客说明</title>
        <description>&lt;h6&gt;1. 使用media query做了部分响应式&lt;/h6&gt;

&lt;h6&gt;2. 添加了tags标签&lt;/h6&gt;

&lt;h6&gt;3. blockquote样式修改&lt;/h6&gt;

&lt;blockquote&gt;
&lt;p&gt;blockquote样式修改&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h6&gt;4. 添加说明样式，避免和blockquote同一个样式&lt;/h6&gt;

&lt;div class=&quot;text-info&quot;&gt;这是一个说明&lt;/div&gt;

&lt;h6&gt;5. 使用figure来表示图片&lt;/h6&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://7sbqpj.com1.z0.glb.clouddn.com/sunrise2.jpg&quot; alt=&quot;img&quot;&gt;
    &lt;figcaption&gt;Sunrise @Home&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h6&gt;6. 添加多说，百度以及Google analysis，其余地方细化&lt;/h6&gt;
</description>
        <pubDate>Fri, 09 Jan 2015 00:00:00 +0800</pubDate>
        <link>/articles/blog-update/</link>
        <guid isPermaLink="true">/articles/blog-update/</guid>
        
        <category>Jekyll</category>
        
        
        <category>articles</category>
        
      </item>
    
      <item>
        <title>函数</title>
        <description>&lt;h5&gt;1. 函数声明&lt;/h5&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;funcName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;由于声明提前，可以在定义之前调用此函数。不能出现在循环，条件判断，或者try/catch/finally以及with语句里。&lt;/p&gt;

&lt;p&gt;此外，要注意函数内的的变量声明也是会提前的。这里经常笔面试出题。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;global&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scopeTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;local&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//scope变量提前到console.log语句前。&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;scopeTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//undefined&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h5&gt;2. 函数表达式(函数名可选，在递归时通常会写函数名)&lt;/h5&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;不能在定义之前调用。&lt;/p&gt;

&lt;h3&gt;函数调用及其调用上下文&lt;/h3&gt;

&lt;h5&gt;1. 作为函数&lt;/h5&gt;

&lt;p&gt;非严格模式下，&lt;strong&gt;调用上下文&lt;/strong&gt;（this值)是全局对象，严格模式下，&lt;strong&gt;调用上下文&lt;/strong&gt;是undefined.&lt;/p&gt;

&lt;h5&gt;2. 作为方法&lt;/h5&gt;

&lt;p&gt;调用上下文和与函数调用不同。指的&lt;strong&gt;是&lt;/strong&gt;当前对象，而&lt;strong&gt;不是&lt;/strong&gt;全局对象。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// An object o.&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Method m of the object.&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Save the this value in a variable.&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 1.Prints &amp;quot;true&amp;quot;: this is the object o.&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 作为函数调用,因此其调用上下文是全局对象或者undefined。所以2的结果为false&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// A nested function f&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 2.&amp;quot;false&amp;quot;: this is global or undefined&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 3.&amp;quot;true&amp;quot;: self is the outer this value.&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 作为方法调用，其调用上下文为当前对象。因此1的结果为true。&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;当方法的返回值是对象时，对象还可调用其方法,行成方法链。就像jQuery一样。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ob&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;ob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h5&gt;3. 作为构造函数&lt;/h5&gt;

&lt;p&gt;函数/方法前带有关键字new，就构成了构造函数调用。&lt;/p&gt;

&lt;p&gt;构造函数调用创建一个新的空的对象，这个对象继承自构造函数的prototype属性。构造函数的&lt;strong&gt;调用上下文&lt;/strong&gt;为新创建的对象。&lt;/p&gt;

&lt;p&gt;构造函数通常不用return关键字，通常返回的是新创建的的对象的值。比如熟悉的&lt;code&gt;var obj = new Object;&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;当构造函数显式地使用return语句返回对象时，返回的就是该对象；如果返回的是原始值，则跟没有显式使用return是一样的。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;test1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//returns a primitive value&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//Results&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;test1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;test2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//returns an object&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//Results&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;test2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h5&gt;4. 通过call(),apply()间接调用&lt;/h5&gt;

&lt;p&gt;第一个实参是要调用函数的母对象，它是&lt;strong&gt;调用上下文&lt;/strong&gt;，&lt;code&gt;f.call(o)&lt;/code&gt;以及&lt;code&gt;f.apply(o)&lt;/code&gt;的意思是：以对象o的方法来调用f函数。&lt;/p&gt;

&lt;p&gt;严格模式下，第一个实参都会变成this的值，哪怕传入的实参是原始值/null/undefined&lt;/p&gt;

&lt;p&gt;非严格模式下，传入的null/undefined会被全局变量代替。&lt;/p&gt;

&lt;p&gt;apply和call的区别在于传入实参的形式不同，比如&lt;code&gt;apply(o,[x,y,z...])&lt;/code&gt;与&lt;code&gt;call(o,x,y,z,...)&lt;/code&gt;。&lt;/p&gt;
</description>
        <pubDate>Mon, 05 Jan 2015 00:00:00 +0800</pubDate>
        <link>/articles/function/</link>
        <guid isPermaLink="true">/articles/function/</guid>
        
        <category>JavaScript权威指南</category>
        
        <category>函数</category>
        
        
        <category>articles</category>
        
      </item>
    
      <item>
        <title>新的一年</title>
        <description>&lt;p&gt;2015第一天的日出：&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://7sbqpj.com1.z0.glb.clouddn.com/sunrise1.jpg&quot; alt=&quot;img&quot;&gt;
    &lt;figcaption&gt;Sunrise @Home&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;最后，希望新的一年，家人平安，一切顺利，梦想达成。&lt;/p&gt;
</description>
        <pubDate>Fri, 02 Jan 2015 00:00:00 +0800</pubDate>
        <link>/life/new-year/</link>
        <guid isPermaLink="true">/life/new-year/</guid>
        
        <category>生活</category>
        
        
        <category>life</category>
        
      </item>
    
      <item>
        <title>Font Weight</title>
        <description>&lt;ul&gt;
&lt;li&gt;100 - Thin&lt;/li&gt;
&lt;li&gt;200 - Extra Light (Ultra Light)&lt;/li&gt;
&lt;li&gt;300 - Light&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;400 - Normal,Regular,Roman,Book&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;500 - Medium&lt;/li&gt;
&lt;li&gt;600 - Semi Bold (Demi Bold)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;700 - Bold&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;800 - Extra Bold (Ultra Bold)&lt;/li&gt;
&lt;li&gt;900 - Black (Heavy)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CSS规定：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果Medium是唯一变形，则它的font-weight为400&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;未指定500的加粗度时，和400一致&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;未指定300的加粗度时，指定比400更细的字体变形。如果没有比400更细的变形，则与&lt;strong&gt;400&lt;/strong&gt;一致。100，200亦如此。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;未指定600的加粗度时，指定比400更粗的字体变形。若没有，则与&lt;strong&gt;500&lt;/strong&gt;一致。700，800，900也是这样。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;1.只有一种变形&lt;/h5&gt;

&lt;p&gt;比如SimSun，如下图：&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://7sbqpj.com1.z0.glb.clouddn.com/fw-simsun.png&quot; alt=&quot;中易宋体的不同font weight&quot;&gt;
    &lt;figcaption&gt;中易宋体的不同font weight&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Regular对应的font-weight是400.当font-weight=500时，它和400一样。100，200，300最后和400都一致。按理来说，当font-weight&amp;gt;500时，也应
该与400一样。但是浏览器会渲染加粗（伪粗体），和别的有bold的字体是不一样的。&lt;/p&gt;

&lt;p&gt;只有一种变形的不只是SimSun，还有华文黑体。浏览器又一次给了个惊喜：&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://7sbqpj.com1.z0.glb.clouddn.com/fw-stheiti.png&quot; alt=&quot;华文黑体的不同font weight&quot;&gt;
    &lt;figcaption&gt;华文黑体的不同font weight&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;大于500不给渲染加粗了，摔！&lt;/p&gt;

&lt;h5&gt;2.有两种变形的字体&lt;/h5&gt;

&lt;p&gt;Hiragino Sans GB，分别有W3和W6两种变形。w3对应regular，w6对应bold。&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://7sbqpj.com1.z0.glb.clouddn.com/fw-hs.png&quot; alt=&quot;Hiragino Sans GB的不同font weight&quot;&gt;
    &lt;figcaption&gt;Hiragino Sans GB的不同font weight&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;600~900对应的是&lt;strong&gt;真&lt;/strong&gt;粗体。&lt;/p&gt;

&lt;h5&gt;3.当有多种变形的时候，浏览器之间就存在分歧了。&lt;/h5&gt;

&lt;p&gt;比如&lt;code&gt;&amp;quot;Helvetica Neue&amp;quot;&lt;/code&gt;(ultra light, thin, light, regular, medium, bold六种变形)：&lt;/p&gt;

&lt;p&gt;Chrome:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://7sbqpj.com1.z0.glb.clouddn.com/chrome-fw-hn.png&quot; alt=&quot;Chrome下Helvetica Neue的不同font weight&quot;&gt;
    &lt;figcaption&gt;Chrome下Helvetica Neue的不同font weight&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Firefox:&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;
     &lt;img src=&quot;http://7sbqpj.com1.z0.glb.clouddn.com/firefox-fw-hn.png&quot; alt=&quot;FireFox下Helvetica Neue的不同font weight&quot;&gt;
     &lt;figcaption&gt;FF下Helvetica Neue的不同font weight&lt;/figcaption&gt;
 &lt;/figure&gt;
明显，在Firefox里200和300是不一样的。&lt;/p&gt;

&lt;p&gt;在遇到Google Fonts（安装在Mac上）时，FF和webkit那几个浏览器一样糟糕。比如Roboto(6种变形:thin, light, regular, medium, bold, black)
&lt;figure&gt;
     &lt;img src=&quot;http://7sbqpj.com1.z0.glb.clouddn.com/ff-fw-roboto.png&quot; alt=&quot;FireFox下Roboto的不同font weight&quot;&gt;
     &lt;figcaption&gt;FF下Roboto的不同font weight&lt;/figcaption&gt;
 &lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Roboto thin对应的是weight为100的时候，但是无论是哪个浏览器中，weight 100和200都是light。&lt;/p&gt;

&lt;p&gt;还好，像比如Roboto这样的Google fonts一般会使用：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;http://fonts.googleapis.com/css?family=Roboto:400,100,300,500,700,900&amp;#39;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;stylesheet&amp;#39;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;text/css&amp;#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;来使用该字体：
&lt;figure&gt;
     &lt;img src=&quot;http://7sbqpj.com1.z0.glb.clouddn.com/ff-fw-roboto2.png&quot; alt=&quot;roboto different weight&quot;&gt;
     &lt;figcaption&gt;FF下roboto不同font weight&lt;/figcaption&gt;
 &lt;/figure&gt;
明显看得出100, 200(thin)和300(light)是不一样的。&lt;/p&gt;

&lt;p&gt;此外，各个字体之间的font weight也没统一命名：比如Helvetica Nenue的ultra light是最细的字体，但Roboto的thin是Roboto最细的字体。
Noto Sans CJK SC(thin, light, demilight, regular, medium, bold, black)更甚,居然用350这个数值：&lt;/p&gt;

&lt;figure&gt;
     &lt;img src=&quot;http://7sbqpj.com1.z0.glb.clouddn.com/noto-demi-light.png&quot; alt=&quot;Noto sans cjk sc&quot;&gt;
     &lt;figcaption&gt;Noto sans cjk sc DemiLight&lt;/figcaption&gt;
 &lt;/figure&gt;

&lt;p&gt;结果：
&lt;figure&gt;
     &lt;img src=&quot;http://7sbqpj.com1.z0.glb.clouddn.com/ff-fw-noto.png&quot; alt=&quot;Noto sans cjk sc different weight&quot;&gt;
     &lt;figcaption&gt;FF下Noto sans cjk sc不同font weight&lt;/figcaption&gt;
 &lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;如图，thin, light两种粗细在浏览器上显示不了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;参考文献&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.zhihu.com/question/20110409&quot;&gt;浏览器是怎样根据 CSS 中是的 font-weight 属性值渲染出具体字体粗细程度的？有统一规定的计算方式吗？&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/9630599/how-is-text-thickness-calculated-according-to-css-property-font-weight&quot;&gt;How is text thickness calculated according to css property “font-weight”?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://wordpress.org/support/topic/missing-light-option-for-open-sans&quot;&gt;Missing &amp;quot;Light&amp;quot; Option for Open Sans&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Fri, 12 Dec 2014 00:00:00 +0800</pubDate>
        <link>/articles/font-3/</link>
        <guid isPermaLink="true">/articles/font-3/</guid>
        
        <category>CSS权威指南</category>
        
        <category>Font</category>
        
        
        <category>articles</category>
        
      </item>
    
      <item>
        <title>字体2</title>
        <description>&lt;h5&gt;1.font-family应该优先指定英文字体，然后再指定中文字体。否则，中文字体所包含的英文字母，会取代英文字体。&lt;/h5&gt;

&lt;p&gt;这一点觉得国内做得不错了。。吐槽一下我们的邻国日本，青一色的日文字体在前英文字体在后。不过日常他们确实偏爱日文字体的&lt;strong&gt;全角&lt;/strong&gt;英文啊。&lt;/p&gt;

&lt;h5&gt;2.为什么经常看到网页中宋体用unicode而不用英文名（淘宝），&lt;/h5&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://7sbqpj.com1.z0.glb.clouddn.com/taobao-font.png&quot; alt=&quot;淘宝首页字体&quot;&gt;
    &lt;figcaption&gt;淘宝首页字体设置&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;这是因为Firefox的某些版本和早期Opera识别不了中文字体的英文写法，比如SimSun。（unicode编码都可以通过escape(‘字体名’)获得。）&lt;/p&gt;

&lt;p&gt;Mac下Opera因为是Webkit内核，所以也支持SimSun的写法了。&lt;/p&gt;

&lt;p&gt;那写成&lt;code&gt;font-family: arial,\5B8B\4F53,sans-serif&lt;/code&gt;好么？&lt;/p&gt;

&lt;p&gt;答案是不好。因为Mac的Chrome,Safari等webkit系浏览器不认unicode转码过来的字体，事实上它连&lt;code&gt;font-family: 宋体；&lt;/code&gt;这种写法都不接受...
如果是Mac的Chrome默认设置，显示的字体将会是&lt;code&gt;stheiti&lt;/code&gt;。&lt;/p&gt;

&lt;h5&gt;3.字体fallback问题&lt;/h5&gt;

&lt;p&gt;参考文献1有很详细的介绍。&lt;/p&gt;

&lt;h4&gt;一些参考文献：&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://justineo.github.io/slideshows/font/#/&quot;&gt;字体漫谈&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://lifesinger.wordpress.com/2011/04/06/best-web-default-fonts/&quot;&gt;最佳Web中文默认字体&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.zhihu.com/question/19911793&quot;&gt;如何保证网页的字体在各平台都尽量显示为最高质量的黑体&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://lifesinger.github.io/lab/2011/default-fonts/&quot;&gt;玉伯的字体测试&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 07 Dec 2014 00:00:00 +0800</pubDate>
        <link>/articles/font-2/</link>
        <guid isPermaLink="true">/articles/font-2/</guid>
        
        <category>CSS权威指南</category>
        
        <category>Font</category>
        
        
        <category>articles</category>
        
      </item>
    
      <item>
        <title>字体1</title>
        <description>&lt;p&gt;主要分为五大类字体：&lt;/p&gt;

&lt;h5&gt;1.serif字体:成比例（即不等宽），且有上下划线&lt;/h5&gt;

&lt;p&gt;常用的英文字体有Times, Georgia...&lt;/p&gt;

&lt;p&gt;对应中文的‘白体’。&lt;/p&gt;

&lt;p&gt;以前最常用的中易宋体SimSun其实无论中英文都是等宽的。wiki也把中易宋体（SimSun）归为等宽字体，但一般都把SimSun作为一种Serif字体。&lt;/p&gt;

&lt;h5&gt;2.sans-serif:成比例，无上下划线&lt;/h5&gt;

&lt;p&gt;常用的英文字体有：Helvetica, Verdana, Arial, Tahoma, Calibri, &lt;strong&gt;Roboto&lt;/strong&gt;...&lt;/p&gt;

&lt;p&gt;对应的中文字体是‘黑体’(为与黑体(比如Heiti SC和SimHei的中文名称）混淆，又称粗体)。除了上述黑体，常用的还有雅黑，Hiragino Sans GB,以及
Google和Adobe合作的&lt;strong&gt;Noto系列&lt;/strong&gt;...&lt;/p&gt;

&lt;p&gt;另外，Noto和Roboto是Google Material design建议字体。&lt;/p&gt;

&lt;h5&gt;3.monospace:不成比例（等宽），可能有下划线也可能没有&lt;/h5&gt;

&lt;div class=&quot;text-info&quot;&gt;中（日）文字体都是方块字，是等宽字体。我想是对英文字体上的处理而把上述中文字体划为sans-serif。&lt;/div&gt;

&lt;p&gt;英文字体monaco曾是Mac终端上的默认字体。现为menlo，同样是等宽字体。除此还有Courier...代码一般会用等宽字体。&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://7sbqpj.com1.z0.glb.clouddn.com/monaco.png&quot; alt=&quot;font monaco&quot;&gt;
    &lt;figcaption&gt;monaco&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;上图字体为monaco,很明显能看得出是等宽的。再对比下图的非等宽的Roboto(thin)的字体就更明显了。&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://7sbqpj.com1.z0.glb.clouddn.com/roboto.png&quot; alt=&quot;font roboto&quot;&gt;
    &lt;figcaption&gt;roboto&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;最后看看中文字体（雅黑）对英文的处理&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://7sbqpj.com1.z0.glb.clouddn.com/msyahei.png&quot; alt=&quot;font ms yahei&quot;&gt;
    &lt;figcaption&gt;microsoft yahei&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h5&gt;4.cursive:模仿人类的字体&lt;/h5&gt;

&lt;h5&gt;5.fantasy:奇怪的字体&lt;/h5&gt;
</description>
        <pubDate>Wed, 03 Dec 2014 00:00:00 +0800</pubDate>
        <link>/articles/font-1/</link>
        <guid isPermaLink="true">/articles/font-1/</guid>
        
        <category>CSS权威指南</category>
        
        <category>Font</category>
        
        
        <category>articles</category>
        
      </item>
    
  </channel>
</rss>
